{"version":3,"sources":["alchemy.js"],"names":["window","document","AO","on","tinymce","initialSettings","tinyMCEPreInit","mceInit","$","$userProfileContainer","$metaboxes","$alchemy","pageID","$alchOptions","searchParams","popperInstances","URL","location","href","get","$fields","constrFields","$field","field","children","$children","i","child","type","find","each","push","$button","Function","alchemy","this","map","destroy","data","attr","removeClass","text","concat","id","instance","next","ajax","saveOptionsData","AlchemyData","dataType","all","fieldsPromises","then","values","success","append","nonce","reload","JSON","stringify","error","responseJSON","messsages","topMostPosition","url","contentType","$tooltip","blockTop","offset","code","Popper","modifiers","fallbackPlacements","top","parents","addClass","createPopper","placement","name","options","one","hasClass","removeAttr","add","animate","scrollTop","preventDefault","subscribe","editor","closest","$postBox","isSavingPost","saved","remove","save_metadata","$postForm","e","$trigger","$profileForm","wp","select","click","userProfileData","userID","method","processData","submit","saveMetaboxesData","Promise","postID","jQuery"],"mappings":"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","file":"alchemy.min.js","sourcesContent":["'use strict';\r\n\r\n((window, document, $) => {\r\n    window.AO = window.AO || {};\r\n\r\n    $(document).on('tinymce-editor-init', () => {\r\n        AO.tinymce = AO.tinymce || {};\r\n        AO.tinymce.initialSettings = tinyMCEPreInit.mceInit['alchemy-temp-editor'];\r\n    });\r\n\r\n    $(() => {\r\n        const $alchemy = $('.jsAlchemy');\r\n        const $metaboxes = $('.jsAlchemyMetaBox');\r\n        const $userProfileContainer = $('.jsAlchemyUserProfile');\r\n\r\n        if( ! $alchemy ) {\r\n            return;\r\n        }\r\n\r\n        const $alchOptions = $('.jsAlchemyOptions');\r\n        const currentUrl = new URL(window.location.href);\r\n        const pageID = currentUrl.searchParams.get('page');\r\n        const data = new FormData();\r\n        const popperInstances = {};\r\n\r\n        const $fields = $alchOptions.children('.jsAlchemyField');\r\n        const constrFields = [];\r\n\r\n        $fields.each((i, field) => {\r\n            const $field = $(field);\r\n\r\n            if( 'sections' === $field.data('alchemy').type ) {\r\n                const $children = $field.find('.jsAlchemySectionsTab').children('.jsAlchemyField');\r\n\r\n                if( $children[0] ) {\r\n                    $children.each((i, child) => {\r\n                        constrFields.push($(child));\r\n                    });\r\n                }\r\n            } else {\r\n                constrFields.push($field);\r\n            }\r\n        });\r\n\r\n        $alchemy.on('click', '.jsAlchemySaveOptions', function() {\r\n            const $button = $(this);\r\n            const fieldsPromises = $(constrFields).map((i, $field) => {\r\n                const alchemy = $field.data('alchemy');\r\n\r\n                $field.removeClass('alchemy__field--invalid').children('.jsAlchemyValidationTooltip').find('.jsAlchemyTooltipText').text('');\r\n\r\n                return new Function( `return AO['get_${alchemy.type}_value']('${alchemy.id}');` )(alchemy.id)\r\n            }).get();\r\n\r\n            $.each(popperInstances, (i, instance) => {\r\n                instance.destroy();\r\n            });\r\n\r\n            $button.attr('disabled', true).next('.jsAlchemyLoader').removeClass('alchemy__spinner--hidden');\r\n\r\n            let saveOptionsData = AlchemyData['save-options'];\r\n\r\n            if( $button.data() && 'network' === $button.data('type') ) {\r\n                saveOptionsData = AlchemyData['save-network-options'];\r\n            }\r\n\r\n            Promise.all(fieldsPromises).then(values => {\r\n                data.append('_wpnonce', saveOptionsData.nonce);\r\n                data.append('page-id', pageID);\r\n                data.append('values', JSON.stringify(values));\r\n\r\n                $.ajax({\r\n                    method: \"POST\",\r\n                    url: saveOptionsData.url,\r\n                    dataType: 'json',\r\n                    processData: false,\r\n                    contentType: false,\r\n                    data: data,\r\n                    success: () => {\r\n                        window.location.reload();\r\n                    },\r\n                    error: error => {\r\n                        if( error.responseJSON.data && 'alch-save-validation-errors' === error.responseJSON.code ) {\r\n                            const messsages = error.responseJSON.data['invalid-fields'];\r\n\r\n                            let topMostPosition = 0;\r\n\r\n                            $(constrFields).each((i, $field) => {\r\n                                const alchemy = $field.data('alchemy');\r\n\r\n                                if( messsages[alchemy.id] ) {\r\n                                    const $tooltip = $field.children('.jsAlchemyValidationTooltip');\r\n                                    const blockTop = $field.offset().top;\r\n\r\n                                    topMostPosition = -100 + ( blockTop > topMostPosition ? blockTop : topMostPosition );\r\n\r\n                                    if( $tooltip[0] ) {\r\n                                        $tooltip.attr('data-show', true).find('.jsAlchemyTooltipText').text(messsages[alchemy.id]);\r\n\r\n                                        $field.addClass('alchemy__field--invalid').parents('.repeatee').addClass('repeatee--expanded');\r\n\r\n                                        popperInstances[alchemy.id] = Popper.createPopper( $field[0], $tooltip[0], {\r\n                                            placement: 'top',\r\n                                            modifiers: [\r\n                                                {\r\n                                                    name: 'flip',\r\n                                                    options: {\r\n                                                        fallbackPlacements: ['top-start'],\r\n                                                    },\r\n                                                }\r\n                                            ],\r\n                                        } );\r\n\r\n                                        $field.one('hover focus', () => {\r\n                                            if( $field.hasClass('alchemy__field--invalid') ) {\r\n                                                $field.removeClass('alchemy__field--invalid');\r\n\r\n                                                if( popperInstances[alchemy.id] ) {\r\n                                                    popperInstances[alchemy.id].destroy();\r\n\r\n                                                    $tooltip.removeAttr('data-show');\r\n                                                }\r\n                                            }\r\n                                        });\r\n\r\n                                        if( topMostPosition ) {\r\n                                            $('html').add('body').animate({ scrollTop: topMostPosition }, 500);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        $button.next('.jsAlchemyLoader').addClass('alchemy__spinner--hidden');\r\n                    },\r\n                    complete: () => {\r\n                        $button.removeAttr('disabled');\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n        if( $metaboxes[0] ) {\r\n            const $postForm = $('#post');\r\n            const $postBox = $metaboxes.closest('.postbox');\r\n\r\n            $postBox.find('.hndle').removeClass('hndle'); // this removes dnd for metaboxes\r\n\r\n            // this removes metaboxes sorting buttons (WP 5.5). It is needed not to break WYSIWYGs\r\n            $postBox.find('.handle-order-higher').remove();\r\n            $postBox.find('.handle-order-lower').remove();\r\n\r\n            if( $postForm[0] ) {\r\n                $('#publish, #save-post').one('click', function(e) {\r\n                    e.preventDefault();\r\n\r\n                    const $trigger = $(this);\r\n\r\n                    $trigger.attr('disabled', true);\r\n\r\n                    save_metadata($trigger);\r\n                });\r\n            } else if( wp.data && wp.data.subscribe ) {\r\n                let saved = true; // helps against multiple save calls\r\n\r\n                wp.data.subscribe(() => {\r\n                    const editor = wp.data.select('core/editor');\r\n\r\n                    if ( editor.isSavingPost() ) {\r\n                        saved = false;\r\n                    } else {\r\n                        if ( ! saved ) {\r\n                            save_metadata();\r\n\r\n                            saved = true;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        if( $userProfileContainer[0] ) {\r\n            const $profileForm = $('#your-profile');\r\n\r\n            let saved = false;\r\n\r\n            if( $profileForm[0] ) {\r\n                $profileForm.on('submit', e => {\r\n                    if( ! saved ) {\r\n                        const $fields = $userProfileContainer.children('.jsAlchemyField');\r\n                        const constrFields = [];\r\n\r\n                        $profileForm.find('[type=\"submit\"]').attr('disabled', true)\r\n\r\n                        $fields.each((i, field) => {\r\n                            const $field = $(field);\r\n\r\n                            if( 'sections' === $field.data('alchemy').type ) {\r\n                                const $children = $field.find('.jsAlchemySectionsTab').children('.jsAlchemyField');\r\n\r\n                                if( $children[0] ) {\r\n                                    $children.each((i, child) => {\r\n                                        constrFields.push($(child));\r\n                                    });\r\n                                }\r\n                            } else {\r\n                                constrFields.push($field);\r\n                            }\r\n                        });\r\n\r\n                        const fieldsPromises = $(constrFields).map((i, field) => {\r\n                            const alchemy = $(field).data('alchemy');\r\n\r\n                            return new Function( `return AO['get_${alchemy.type}_value']('${alchemy.id}');` )(alchemy.id)\r\n                        }).get();\r\n\r\n                        const userProfileData = AlchemyData['save-user-profile'];\r\n\r\n                        Promise.all(fieldsPromises).then(values => {\r\n                            data.append('_wpnonce', userProfileData.nonce);\r\n                            data.append('user-id', userProfileData.userID);\r\n                            data.append('values', JSON.stringify(values));\r\n\r\n                            $.ajax({\r\n                                method: \"POST\",\r\n                                url: userProfileData.url,\r\n                                dataType: 'json',\r\n                                processData: false,\r\n                                contentType: false,\r\n                                data: data,\r\n                                success: () => {\r\n                                    $profileForm.submit();\r\n                                }\r\n                            });\r\n                        });\r\n\r\n                        e.preventDefault();\r\n                    } else {\r\n                        $profileForm.find('[type=\"submit\"]').removeAttr('disabled').addClass('disabled').click();\r\n                    }\r\n\r\n                    saved = true;\r\n                });\r\n            }\r\n        }\r\n\r\n        function save_metadata($trigger) {\r\n            const $fields = $metaboxes.children('.metabox__fields').children('.jsAlchemyField');\r\n            const constrFields = [];\r\n\r\n            $fields.each((i, field) => {\r\n                const $field = $(field);\r\n\r\n                if( 'sections' === $field.data('alchemy').type ) {\r\n                    const $children = $field.find('.jsAlchemySectionsTab').children('.jsAlchemyField');\r\n\r\n                    if( $children[0] ) {\r\n                        $children.each((i, child) => {\r\n                            constrFields.push($(child));\r\n                        });\r\n                    }\r\n                } else {\r\n                    constrFields.push($field);\r\n                }\r\n            });\r\n\r\n            const fieldsPromises = $(constrFields).map((i, field) => {\r\n                const alchemy = $(field).data('alchemy');\r\n\r\n                return new Function( `return AO['get_${alchemy.type}_value']('${alchemy.id}');` )(alchemy.id)\r\n            }).get();\r\n\r\n            const saveMetaboxesData = AlchemyData['save-metaboxes'];\r\n\r\n            Promise.all(fieldsPromises).then(values => {\r\n                data.append('_wpnonce', saveMetaboxesData.nonce);\r\n                data.append('post-id', saveMetaboxesData.postID);\r\n                data.append('values', JSON.stringify(values));\r\n\r\n                $.ajax({\r\n                    method: \"POST\",\r\n                    url: saveMetaboxesData.url,\r\n                    dataType: 'json',\r\n                    processData: false,\r\n                    contentType: false,\r\n                    data: data,\r\n                    success: () => {\r\n                        if( $trigger && $trigger[0] ) {\r\n                            $trigger.removeAttr('disabled').click();\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    });\r\n})(window, document, jQuery);\r\n"]}