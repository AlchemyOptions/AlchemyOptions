{"version":3,"sources":["scripts.js"],"names":["window","document","$","AO","$checkboxImages","initialise_checkbox_image","checkboxImage","$labels","$el","find","isMultiple","data","filter","multiple","attr","i","el","hasClass","$label","e","preventDefault","this","toggleClass","is","removeClass","prev","prop","on","inArray","which","get_checkbox_image_value","$repeatee","id","concat","value","Promise","resolve","map","checkbox","type","jQuery"],"mappings":"AAAA,cAEA,SAACA,EAAAC,EAAAC,GACGF,EAAAG,GAAYH,EAAAG,IAAZ,GAEA,IAAMC,EAAkBF,EAAE,2BAoBtB,SAASG,EAATC,GACMC,IAAAA,EAAUC,EAAIC,GACdC,EAAgBF,EAACG,KAAK,SAEpBC,EAAOJ,EAAAG,KAAW,WAAAE,SAEvBC,EAAKF,OAFR,SAEoBG,EAFpBC,GAIA,OAAAd,EAAkBY,GAAKG,SAAA,+BAEhBH,KAAA,WAAS,GAGZN,EAAMU,KAAM,SAAZJ,KAAA,YAAA,GAEAN,EAAIU,GAAAA,QAAOD,+BAAP,SAAyDA,GACzDE,EAAAC,iBAHJ,IAAMF,EAAShB,EAAEmB,MAOLT,EAAOK,SAACF,8BAAUG,EAAAD,SAAA,+BADxBP,GAMCY,EAAPV,OAAmB,SAAAG,EAAAC,GAfvB,OAAAd,EAAAc,GAAAO,GAAAL,KAkBOM,YAAY,2BAAgCC,KAAA,SAAWC,KAAA,WAAA,GAGtDR,EAAOD,YAAU,2BAAgCQ,KAAA,SAAAC,KAAA,UAAAR,EAAAD,SAAA,+BAHzDT,EAAImB,GAAG,WAAY,+BAAgC,SAASR,GAOlDS,IAAAA,EAAF1B,EAAoBmB,MAGbC,EAAAA,SAAY,+BAHiB,IAApCpB,EAAE0B,QAAST,EAAEU,MAAO,CAAC,GAAI,OAQlCC,EAAAA,iBAGaZ,EAAZI,YAAA,2BAAAG,KAAA,SAAAC,KAAA,UAAAR,EAAAD,SAAA,+BA/DAb,EAAA,IACIC,EAAAA,KAAAA,SAAAA,EAA0BW,GAD9BX,EAAAW,KAMAd,EAAAD,GAAM8B,GAAS,sBAAf,SAAAZ,EAAAR,GACMP,IAAAA,EAAkB2B,EAAAA,SAAUtB,KAAK,2BAGnCL,EAAqB,IACjBC,EAAAA,KAAyB,SAACW,EAA1BA,GADJX,EAAAW,OAkDRb,GAMgB2B,yBAAR,SAAAE,GADJ,IAIOxB,EAAAN,EAAA,IAAA+B,OAAAD,IAENE,EAAA,GAED,OACIA,EADGC,EAAAA,KAAQC,WAASvB,SACZL,EAAAC,KAAA,YADY4B,IAAA,SAAAtB,EAAAuB,GAAA,OAAApC,EAAAoC,GAAA3B,KAAA,WAGXuB,MAhBjB1B,EAAAC,KAAA,YAAAE,KAAA,SAaWwB,QAAQC,QAAS,CACpBG,KAAQ,iBACRP,GAAMA,EACNE,MAASA,KAlFrB,CAqFGlC,OAAQC,SAAUuC","file":"scripts.min.js","sourcesContent":["\"use strict\";\n\n(function(window, document, $) {\n    window.AO = window.AO || {};\n\n    const $checkboxImages = $('.jsAlchemyCheckboxImage');\n\n    if( $checkboxImages[0] ) {\n        $checkboxImages.each((i, el) => {\n            initialise_checkbox_image(el);\n        });\n    }\n\n    $(document).on('alch_repeatee_added', function(e, data) {\n        const $repeatee = data.repeatee;\n        const $checkboxImages = $repeatee.find('.jsAlchemyCheckboxImage');\n\n        if( $checkboxImages[0] ) {\n            $checkboxImages.each((i, el) => {\n                initialise_checkbox_image(el);\n            });\n        }\n    });\n\n    function initialise_checkbox_image(checkboxImage) {\n        const $el = $(checkboxImage);\n        const $labels = $el.find('label');\n        const isMultiple = $el.data('alchemy').multiple;\n\n        $labels.filter((i, el) => {\n            return ! $(el).hasClass('checkbox__label--disabled')\n        }).attr('tabindex', 0);\n\n        $el.find('input').attr('tabindex', -1);\n\n        $el.on('click', '.jsAlchemyCheckboxImageLabel', function(e){\n            e.preventDefault();\n\n            const $label = $(this);\n\n            if( $label.hasClass( 'checkbox__label--disabled' ) || $label.hasClass( 'checkbox__label--readonly' ) ) {\n                return;\n            }\n\n            if( ! isMultiple ) {\n                $labels.filter((i, el) => {\n                    return ! $(el).is($label)\n                }).removeClass('checkbox__label--active').prev('input').prop('checked', false);\n            }\n\n            $label.toggleClass('checkbox__label--active').prev('input').prop('checked', $label.hasClass( 'checkbox__label--active' ));\n        });\n\n        $el.on('keypress', '.jsAlchemyCheckboxImageLabel', function(e){\n            const $label = $(this);\n\n            if( $label.hasClass( 'checkbox__label--disabled' ) ) {\n                return;\n            }\n\n            if( $.inArray( e.which, [13, 32] ) !== -1 ) {\n                e.preventDefault();\n\n                $label.toggleClass('checkbox__label--active').prev('input').prop('checked', $label.hasClass( 'checkbox__label--active' ));\n            }\n        });\n    }\n\n    AO.get_checkbox_image_value = id => {\n        const $el = $(`#${id}`);\n\n        let value = '';\n\n        if( $el.data('alchemy').multiple ) {\n            value = $el.find(':checked').map((i, checkbox) => {\n                return $(checkbox).data('value');\n            }).get();\n        } else {\n            value = $el.find(':checked').data('value');\n        }\n\n        return Promise.resolve( {\n            'type': 'checkbox_image',\n            'id': id,\n            'value': value\n        } );\n    };\n})(window, document, jQuery);"]}