{"version":3,"sources":["fields/post-type-select/scripts.js"],"names":["window","document","$","AO","$document","ptsData","postTypeSelect","currentUrl","URL","fieldData","searchParams","select2","AlchemyPTSData","locale","location","href","pageID","get","type","dataType","delay","url","params","data","searchedFor","term","_wpnonce","nonce","post-type","page-id","processResults","results","$target","minimumInputLength","append","change","e","target","siblings","children","concat","on","id","option","detach","$select","Promise","resolve","val","ready","$ptsSelects","initialise_post_type_select","each","i","select","repeatee","get_post_type_select_value","jQuery","value"],"mappings":"AAAA,cAEA,SAACA,EAAAC,EAAAC,GACGF,EAAAG,GAAYH,EAAAG,IAAZ,GAIAC,IAAAA,EAAgBF,EAAAD,GAwBZ,SAAMI,EAAwBC,GACxBC,IAAAA,EAAaL,EAAIM,GACXC,EAAGF,EAAWG,KAAAA,WAElBC,EAAQC,eAAA,OACJL,EAAYM,IAAAA,IADRb,EAAAc,SAAAC,MAENC,EAAAT,EAAAG,aAAAO,IAAA,SAAAV,EAAAG,aAAAO,IAAA,QAEFC,EAAMP,QAFJ,CAGFQ,SAAUV,EAHRI,OAIFO,KAJE,CAKIC,IAAAhB,EAAAiB,IACFJ,KAAO,MACHC,SAAA,OACAC,MAAA,IACAG,KAAA,SAAAD,GACA,MAAWN,CAJfQ,YAAAF,EAAAG,KANFC,SAAArB,EAAAsB,MAacC,YAAAnB,EAAA,aACLoB,UAAAb,IAdTc,eAAA,SAAAP,GAkBK,MAAA,CApBCQ,QAAAR,EAAAA,OAwBNS,OAAa,GAGbC,mBAAN,IACAD,GAAQE,iBAAeC,SAAAA,GA5B3B,IAAAH,EAAA9B,EAAAkC,EAAAC,QA+BQC,EAASN,EAAAO,SAAA,UAAAC,OAAiCC,EAAlDnB,OAAqDC,KAASmB,GAA7C,MAAjBC,EAAAC,SAGHZ,EAAAE,OAAAS,GAAAR,WAGGU,EAAOC,SAAQC,iCAASN,GAAA,QAAA,WACpBI,EAAQG,IAAA,IAAAb,WAlEhB/B,EAAU6C,MAAM,WAGRC,IAAAA,EAAiBhD,EAAA,4BAEbiD,EAAAA,IADJD,EAAAE,KAAA,SAAAC,EAAAC,GAGHH,EAAAG,OAGLlD,EAAUqC,GAAG,sBAAuB,SAASL,EAAGb,GAIxC2B,IACAA,EADiB3B,EAAAgC,SACID,KAAJ,4BAAjBJ,EAAA,IAGHA,EAAAE,KAAA,SAAAC,EAAAC,GARLH,EAAAG,OAsDAnD,GAAAqD,2BAAA,SAAAd,GAOD1C,OAAQC,QAAUwD,QA5ErB,CAuEYvC,KAAQ,mBACRwB,GAAMA,EACNgB,MAASxD,EAAC,IAAAsC,OAAKE,IAAMM,SAzEjC,CA4EGhD,OAAQC,SAAUwD","file":"fields\\post-type-select\\scripts.min.js","sourcesContent":["\"use strict\";\n\n(function(window, document, $) {\n    window.AO = window.AO || {};\n\n    const $document = $(document);\n\n    $document.ready(() => {\n        const $ptsSelects = $('.jsAlchemyPostTypeSelect');\n\n        if( $ptsSelects[0] ) {\n            $ptsSelects.each((i, select) => {\n                initialise_post_type_select(select);\n            });\n        }\n    });\n\n    $document.on('alch_repeatee_added', function(e, data) {\n        const $repeatee = data.repeatee;\n        const $ptsSelects = $repeatee.find('.jsAlchemyPostTypeSelect');\n\n        if( $ptsSelects[0] ) {\n            $ptsSelects.each((i, select) => {\n                initialise_post_type_select(select);\n            });\n        }\n    });\n\n    function initialise_post_type_select(postTypeSelect) {\n        const $select = $(postTypeSelect);\n        const fieldData = $select.data('alchemy');\n        const ptsData = AlchemyPTSData['search'];\n        const currentUrl = new URL(window.location.href);\n        const pageID = currentUrl.searchParams.get('page') || currentUrl.searchParams.get('post');\n\n        $select.select2({\n            language: fieldData.locale,\n            ajax: {\n                url: ptsData.url,\n                type: 'get',\n                dataType: 'json',\n                delay: 250,\n                data: params => {\n                    return {\n                        'searchedFor': params.term,\n                        '_wpnonce': ptsData.nonce,\n                        'post-type': fieldData['post-type'],\n                        'page-id': pageID\n                    };\n                },\n                processResults: data => {\n                    return {\n                        results: data.data,\n                    };\n                },\n                cache: false\n            },\n            minimumInputLength: 2\n        }).on('select2:select', e => {\n            const $target = $(e.target);\n            const option = $target.children(`[value=${e.params.data.id}]`);\n\n            option.detach();\n            $target.append(option).change();\n        });\n\n        $select.siblings('.jsAlchemyPostTypeSelectClear').on('click', () => {\n            $select.val(\"\").change();\n        });\n    }\n\n    AO.get_post_type_select_value = id => {\n        return Promise.resolve( {\n            'type': 'post_type_select',\n            'id': id,\n            'value': $(`#${id}`).val()\n        } );\n    };\n})(window, document, jQuery);\n"]}